#!/usr/bin/env python3
"""
get the clinical data from TCGA for the patients
save some columns and create some new:
extract score values
create grade group column
save pandas(csv) and dict (json)
"""
from omics_processing.io import process_clinical_TCGA, set_path
import os
import sys
import plac
import logging
script_path = os.path.dirname(__file__)


@plac.annotations(
    filepath=plac.Annotation(
        'File path where the gaf will be stored.',
        type=str
    ),
    outdir=plac.Annotation(
        'Folder where the output will be saved.',
        'option', type=str
    ),
    key_col=plac.Annotation(
        'Select key column from clinical data table'
        'this column will be used as index.',
        'option', type=str
    ),
    gleason_cols=plac.Annotation(
        'Select gleason columns from clinical data table.'
        'score, primary and secondary pattern'
        '(in order to create the Gleason grade group)',
        'option', type=str
    ),
    other_cols=plac.Annotation(
        'Select extra columns from clinical data table.'
        '(seperate the strings with comma)',
        'option', type=str
    ),
    DEBUG=plac.Annotation(
        'Set True if you want to DEBUG the code.',
        'option', 'D', bool
    )
)
def main(
    # filepath="TCGA_PRAD/input/nationwidechildrens.org_clinical_patient_prad.txt",
    # key_col="bcr_patient_barcode",
    # gleason_cols="gleason_score," +
    #              "gleason_pattern_primary," +
    #              "gleason_pattern_secondary",
    filepath="TCGA_PRAD/input/gdac.broadinstitute.org_PRAD." +
             "Merge_Clinical.Level_1.2016012800.0.0/" +
             "PRAD.clin.merged.txt",
    key_col="patient.bcr_patient_barcode",
    gleason_cols="patient.stage_event.gleason_grading.gleason_score," +
                 "patient.stage_event.gleason_grading.primary_pattern," +
                 "patient.stage_event.gleason_grading.secondary_pattern",
    outdir="TCGA_PRAD/processed",
    other_cols=None,
    DEBUG=True
):
    if DEBUG:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

    kwargs = {'gleason_cols': gleason_cols,
              'other_cols': other_cols,
              }

    # set main data directory
    MainDataDir = set_path(os.path.join(script_path, '..', 'data'))

    # make fpaths valid
    filepath = set_path(filepath, parent_dir=MainDataDir, force=False)
    outdir = set_path(outdir, parent_dir=MainDataDir, force=False)

    """ Get GAF file"""
    _ = process_clinical_TCGA(
        filepath, outdir, key_col, **kwargs)


if __name__ == '__main__':
    plac.call(main)
