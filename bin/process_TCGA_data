#!/usr/bin/env python3
"""
process the CNV data from TCGA PRAD
load_data, clean_samples, split_data,
clean_genes, transform_data, sort_data

clean_samples:
check if we have more than one samples per patient
extract patient and sample info from barcode
check what sample types exist
replace the index

split_data:
split the data into training and testing sets
(train_size should be smaller than 1.0 or be an integer)

clean_genes:
drop columns that are ALL NaN
sanity check (TODO: set imputation in case it fails)
drop columns that contain all zeroes

transform_data:
arcsinh transformation [optional]
standardize transformation

sort_data:
sort the table columns with the genes chr position
sort samples by 'grade_group'
"""
# include custom imports here
from omics_processing.pipelines.process_TCGA_data import (
    run_pipeline
)

# basic imports here
import os
import sys
import plac
import logging
import json

script_path = os.path.dirname(__file__)
script_fname = os.path.basename(__file__).rsplit('.')[0]
logger = logging.getLogger(__name__)


debug_config = os.path.join(
    script_path, '..', 'examples',
    'configs', 'DEBUG.json')
params = {}


@plac.annotations(
    json_config=plac.Annotation(
        'File path where the json config is stored.',
        'option', 'config', type=str
    ),
    set_up_kwargs='keyword arguments',
    DEBUG=plac.Annotation(
        'DEBUG mode',
        'option', 'D', type=bool
    ),
)
def main(json_config, DEBUG=True, **set_up_kwargs):

    if DEBUG:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        if json_config is None:
            json_config = debug_config

    if json_config is not None:
        try:
            logger.info('Reading params from config file:\n'+json_config)
            with open(json_config, 'r') as fp:
                set_up_kwargs_config = json.load(fp)

            # -- left_dict.update(right_dict):
            # -- update the left dict key/value pairs
            # -- if the right dict hasdifferent values
            # -- and take the union of all pairs

            #  update default params with config params
            params.update(set_up_kwargs_config)
            #  update params again with command line params
            params.update(set_up_kwargs)

        except:
            logger.error('Config path does not exist:\n'+json_config)
            raise
    else:
        logger.info('No config file found')
        #  update default params with command line params
        params.update(set_up_kwargs)

    # call the pipeline's run function
    run_pipeline(**params)


if __name__ == '__main__':
    plac.call(main)
